#include <iostream>
using namespace std;

struct deque
{
    int f=-1;
    int r=-1;
    int el[50];
    int s=50;
};

bool isEmpty(deque d)
{
    if(d.f == -1 || d.r ==-1)
        return true;
    return false;
}

int getSize(deque d)
{
    if(d.f==-1)
        return 0;
    return (d.r - d.f + d.s )%d.s +1;
}

int d.rItem(deque d)
{
    if(isEmpty(d))
    {
        cout<<"deque seems empty"<<endl;
        return -1;
    }
    return d.el[d.r];
}

void pushfront(deque d,int x)
{
    if(isFull(d))
    {
        cout<<"deque seems full\n";
    }
    else if(d.f == -1)
    {
        d.f = 0;
        d.r = 0;
        d.el[d.f] = x;
    }
    else
    {
        d.f = (d.f-1+size)%size;
        d.el[d.f] = x;
    }
}

void pushrear(deque d,int x)
{
    if(isFull())
        cout<<"deque seems full"<<endl;
    else if(d.f == -1)
    {
        d.f=0;
        d.r=0;
        d.el[d.r] = x;
    }
    else
    {
        d.r = (d.r+1)%size;
        d.el[d.r] = x;
    }
}

int popfront(deque d)
{
    int temp;
    if(isEmpty())
        cout<<"deque seems empty\n";
    else if(d.f==d.r)
    {
        temp = d.el[d.f];
        d.f = -1;
        d.r = -1;
    }
    else
    {
        temp = d.el[d.f];
        d.f = (d.f+1)%size;
    }
    return temp;
}

int poprear(deque d)
{
    int temp;
    if(isEmpty())
        cout<<"deque seems empty\n";
    else if(d.f==d.r)
    {
        temp = d.el[d.f];
        d.f = -1;
        d.r = -1;
    }
    else
    {
        temp = d.el[d.r];
        d.r = (d.r-1+size)%size;
    }
    return temp;
}

int frontItem(deque d)
{
    if(isEmpty())
    {
        cout<<"deque seems empty"<<endl;
        return -1;
    }
    return d.el[d.f];
}
